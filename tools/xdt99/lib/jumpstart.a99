* jumpstart.a99
* Load and run assembly program as quickly as possible

       def  start

first  jmp  start
       
ws:
       equ  >3fb0            ; 32 bytes
sector_map:
       equ  >3fd0            ; 34 bytes
vdp_pab:
       equ  >1000
vdp_buf:
       equ  >1100

js_version:
       equ  >c2b9            ; version 1

reg_drive:
       equ  >834c
reg_mode:
       equ  >834d
reg_buffer:
       equ  >834e
reg_sector:
       equ  >8350
reg_pab:
       equ  >8356
       
lv1_read:
       data >0110
mode_read:
       byte >ff

msg_loading:
       text 'LOADING ...'
msg_loading_len:
       equ  $ - msg_loading
msg_error:
       text 'NO JUMPSTART DISK FOUND'
msg_error_len:
       equ  $ - msg_error

****************************************
* main program

       even
start:
       lwpi ws
       limi 0

       ; find drive
       li   r9, js_version
       clr  r3
       li   r4, >0100
!      bl   @read_sector

       li   r0, vdp_buf + 8
       li   r1, ws + 10
       li   r2, 2
       bl   @vmbr
       c    r5, r9
       jeq  load

       ai   r4, >0100
       ci   r4, >0400
       jlt  -!

       clr  r0
       li   r1, msg_error
       li   r2, msg_error_len
       bl   @vmbw

       limi 2
       jmp  $

       ; load sectors
       ; r3 = current sector
       ; r4 = drive
       ; r5 = sector map pointer
       ; r6 = start addr
       ; r7 = load addr
       ; r8 = sector count
load:
       clr  r0
       li   r1, msg_loading
       li   r2, msg_loading_len
       bl   @vmbw

       li   r0, vdp_buf + >14  ; read sector map from reserved area
       li   r1, sector_map
       li   r2, 36             ; start addr + upto 8 chunks + >0000
       bl   @vmbr

       inc  r3
       li   r5, sector_map
       mov  *r5+, r6
       
read_chunk:
       mov  *r5+, r7
       jeq  done
       mov  *r5+, r8
       
!      inc  r3
       bl   @read_sector
       li   r0, vdp_buf
       mov  r7, r1
       li   r2, 256
       a    r2, r7
       bl   @vmbr

       dec  r8
       jne  -!

       jmp  read_chunk
       
done:
       ; message?
       b    *r6

       
****************************************
* read sector
* r3 = sector number, r4 = drive number
       
read_sector:
       mov  r11, r12
       movb @mode_read, @reg_mode
       mov  r3, @reg_sector
       movb r4, @reg_drive   ; do we need to reset this every time?

       li   r0, vdp_buf
       mov  r0, @reg_buffer

       li   r0, vdp_pab
       mov  r0, @reg_pab
       li   r1, lv1_read
       li   r2, 2
       bl   @vmbw

       blwp @dsrlnk
       data >a

       b    *r12


****************************************
* E/A service routines

ws_r0lb:
       equ  ws + 1

       copy "vmbw.a99"
       copy "vmbr.a99"
       copy "dsrlnks.a99"

       end  start

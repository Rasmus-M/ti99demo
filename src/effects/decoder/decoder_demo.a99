*********************************************************************
*
* Animation decoder
* For the TI-99/4A home computer
*
* June 2016
*
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*
*********************************************************************

       COPY "../../common/HEADER.INC"
       COPY "../../common/ROUTINES.INC"       COPY "../../common/HEADER.INC"

**
* VDP memory map
PTRNTB EQU  >0000                      ; Pattern table base
SPRPTB EQU  >1800                      ; Sprite pattern table base
COLRTB EQU  >2000                      ; Color table base
NAMETB EQU  >2800                      ; Name table base
SPRATB EQU  >2B00                      ; Sprite attribute table base

**
* Scratch pad
WRKSP  EQU  >8300                      ; Workspace
R0LB   EQU  WRKSP+1                    ; R0 low byte required for VDP routines
R1LB   EQU  WRKSP+3
R2LB   EQU  WRKSP+5
R3LB   EQU  WRKSP+7
R4LB   EQU  WRKSP+9
R5LB   EQU  WRKSP+11
R6LB   EQU  WRKSP+13
R7LB   EQU  WRKSP+15
PLYRWS EQU  >8320                      ; Sound player workspace
STACK  EQU  PLYRWS+32                  ; Subroutine stack
TICK   EQU  STACK+8
FRMNO  EQU  TICK+2
ANIPTR EQU  FRMNO+2

*******************************************************************************
*
* Main program
*
       XORG FXMEM

       DATA INIT
       DATA FRAME

*********************************************************************
*
* Init
*
INIT   LI   R10,STACK
       MOV  R11,*R10+                  ; Push return address onto the stack
*      Load animation
       LI   R0,26                      ; Bank / file index in R0
       LI   R1,ANIM+>1C00              ; Destination in R1
       LI   R2,>1C00                   ; Number of bytes to copy in R2
       BL   @LDTORAM
       LI   R0,27                      ; Bank / file index in R0
       LI   R1,ANIM+>3800              ; Destination in R1
       LI   R2,>1242                   ; Number of bytes to copy in R2
       BL   @LDTORAM
*      Other init
       BL   @GMODE
       CLR  @TICK
       CLR  @FRMNO
       LI   R0,ANIM
       MOV  R0,@ANIPTR
*      Screen on
       LI   R0,>01E2
       BL   @VWTR
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// INIT

*********************************************************************************
*
* Draw frame
*
FRAME  LI   R10,STACK
       MOV  R11,*R10+                  ; Push return address onto the stack
*      Setup constants
       LI   R8,>4000
       LI   R9,COLRTB
       LI   R12,NAMETB
       LI   R13,R0LB
       LI   R14,VDPWA
       LI   R15,VDPWD
*      First frame clears
       MOV  @FRMNO,R0
       JMP  FRAME0                     ; Always skip clear, change to JNZ to clear
       LI   R0,NAMETB
       MOVB *R13,*R14                  ; Send low byte of VDP RAM write address
       SOC  R8,R0                      ; Set read/write bits 14 and 15 to write (01)
       MOVB R0,*R14                    ; Send high byte of VDP RAM write address
       LI   R2,>300/4
FRAME8 CLR  *R15
       CLR  *R15
       CLR  *R15
       CLR  *R15
       DEC  R2
       JNE  FRAME8
FRAME0 MOV  @ANIPTR,R3
*      Character changes
       CLR  R4
       MOVB *R3+,@R4LB                 ; Get number of pattern changes
       JEQ  FRAME9
*      Pattern
FRAME1 CLR  R0
       MOVB *R3+,*R13                  ; Get pattern number in R0
       SLA  R0,3                       ; Multiply by 8
       MOVB *R13,*R14                  ; Send low byte of VDP RAM write address
       SOC  R8,R0                      ; Set read/write bits 14 and 15 to write (01)
       MOVB R0,*R14                    ; Send high byte of VDP RAM write address
       LI   R2,8
FRAME2 MOVB *R3+,*R15                  ; Send byte to VDP
       DEC  R2
       JNE  FRAME2
*      Color
       A    R9,R0                      ; Move VDP address to color table
       MOVB *R13,*R14                  ; Send low byte of VDP RAM write address
       MOVB R0,*R14                    ; Send high byte of VDP RAM write address
       LI   R2,8
FRAME3 MOVB *R3+,*R15                  ; Send byte to VDP
       DEC  R2
       JNE  FRAME3
*      Next character
       DEC  R4
       JNE  FRAME1
*      Name changes
FRAME9 CLR  R4
       MOVB *R3+,@R4LB                 ; Get total number of name changes
       JEQ  FRAME6
FRAME4 MOVB *R3+,R5                    ; Get count and position
       MOVB *R3+,@R5LB
       MOV  R5,R6                      ; Copy
       ANDI R5,>FC00                   ; Isolate count bits
       SRL  R5,10
       ANDI R6,>03FF                   ; Isolate position bits
       MOV  R12,R0                     ; Get name table address
       A    R6,R0                      ; Add position
       MOVB *R13,*R14                  ; Send low byte of VDP RAM write address
       SOC  R8,R0                      ; Set read/write bits 14 and 15 to write (01)
       MOVB R0,*R14                    ; Send high byte of VDP RAM write address
FRAME5 MOVB *R3+,*R15                  ; Send byte to VDP
       DEC  R4                         ; Dec total number
       DEC  R5
       JNE  FRAME5
       MOV  R4,R4
       JGT  FRAME4
*      Next frame
FRAME6 MOV  R3,@ANIPTR
       INC  @FRMNO
       MOV  @FRMNO,R0
       CI   R0,157
       JNE  FRAME7
*      First frame
       CLR  @FRMNO
       LI   R0,ANIM
       MOV  R0,@ANIPTR
*      Check for finish
FRAME7 INC  @TICK
       CLR  R0
       MOV  @TICK,R1
       CI   R1,4*157
       JL   RETURN
       SETO R0
*      Return
RETURN DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// FRAME

*********************************************************************************
*
* Set graphics mode
*
GMODE  MOV  R11,*R10+                  ; Push return address onto the stack
       CLR  R0
       LI   R1,VREGS
       LI   R2,8
GMODE1 MOVB *R1+,@R0LB
       BL   @VWTR                      ; Set register
       AI   R0,>0100
       DEC  R2
       JNE  GMODE1
*      Clear patterns
       LI   R0,PTRNTB
       CLR  R1
       LI   R2,>800
       BL   @VDPWR
*      Clear colors
       LI   R0,COLRTB
       CLR  R1
       LI   R2,>800
       BL   @VDPWR
*      Clear name table
       LI   R0,NAMETB
       CLR  R1
       LI   R2,>300
       BL   @VDPWR
*      Disable sprites
       LI   R0,SPRATB
       LI   R1,>D000
       BL   @VSBW
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*      VDP registers
VREGS  BYTE >02                        ; Graphics II mode
       BYTE >A2                        ; 16K, display off, interrupt enabled
       BYTE >0A                        ; NAMETB = >2800
       BYTE >9F                        ; COLRTB = >2000, >800 bytes
       BYTE >00                        ; PTRNTB = >0000, >800 bytes
       BYTE >56                        ; SPRATB = >2B00
       BYTE >03                        ; SPRPTB = >1800
       BYTE >00                        ; Backdrop color
*// GMODE

********************************************************************************
*
* VDP Set Write Address
*
* R0: Address to set VDP address counter to
*
VWAD   MOVB @R0LB,@VDPWA               ; Send low byte of VDP RAM write address
       ORI  R0,>4000                   ; Set the two MSbits to 01 for write
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       ANDI R0,>3FFF                   ; Restore R0 top two MSbits
       B    *R11
*// VWAD

********************************************************************************
*
* VDP Single Byte Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
VSBW   MOVB @R0LB,@VDPWA               ; Send low byte of VDP RAM write address
       ORI  R0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       MOVB R1,@VDPWD                  ; Write byte to VDP RAM
       B    *R11
*// VSBW

********************************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
VWTR   MOVB @R0LB,@VDPWA               ; Send low byte (value) to write to VDP register
       ORI  R0,>8000                   ; Set up a VDP register write operation (10)
       MOVB R0,@VDPWA                  ; Send high byte (address) of VDP register
       B    *R11
*// VWTR

*********************************************************************
*
* Fast CPU to VDP copy, replaces VMBW
*
* R0: Destination address
* R1: Source address
* R2: Number of bytes to copy
*
VDPCP  MOV  R11,*R10+                  ; Push return address onto the stack
       SWPB R0
       MOVB R0,@VDPWA                  ; Send low byte of VDP RAM write address
       SWPB R0
       ORI  R0,>4000                   ; Set the two MSbits to 01 for write
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       LI   R0,VDPWD
       MOV  R2,R3
       SRL  R3,3                       ; Number of groups of 8
       JEQ  VDPC2
VDPC1  MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       COC  @VDPC7,R3
       JNE  VDPC4
       BL   @PLAYSNG
VDPC4  DEC  R3
       JNE  VDPC1
       ANDI R2,>0007                   ; Isolate number of remaining bytes
       JEQ  VDPC3
VDPC2  MOVB *R1+,*R0
       DEC  R2
       JNE  VDPC2
*      Return
VDPC3  DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
VDPC7  DATA >0007
*// VDPCP

*********************************************************************
*
* Fast CPU to VDP write, replaces VSMW
*
* R0: Destination address
* R1: Byte to write in MSB
* R2: Number of bytes to copy
*
VDPWR  MOV  R11,*R10+                  ; Push return address onto the stack
       SWPB R0
       MOVB R0,@VDPWA                  ; Send low byte of VDP RAM write address
       SWPB R0
       ORI  R0,>4000                   ; Set the two MSbits to 01 for write
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       LI   R0,VDPWD
       MOV  R2,R3
       SRL  R3,3                       ; Number of groups of 8
       JEQ  VDPW2
VDPW1  MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       COC  @VDPW7,R3
       JNE  VDPW4
       BL   @PLAYSNG
VDPW4  DEC  R3
       JNE  VDPW1
       ANDI R2,>0007                   ; Isolate number of remaining bytes
       JEQ  VDPW3
VDPW2  MOVB R1,*R0
       DEC  R2
       JNE  VDPW2
*      Return
VDPW3  DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
VDPW7  DATA >0007
*// VDPWR

********************************************************************************
*
* Include files
*
ANIM   BCOPY "ani31.bin"

*********************************************************************
*
* 2D Scroller
* For the TI-99/4A home computer
*
* June 2016
*
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*
*********************************************************************

       COPY "../../common/HEADER.INC"
       COPY "../../common/ROUTINES.INC"

**
* Misc memory addresses
RNDSD  EQU  >83C0                      ; Random number seed

**
* VDP memory map
PTRNT1 EQU  >0000                      ; Pattern table base 1
PTRNT2 EQU  >0800                      ; Pattern table base 2
PTRNT3 EQU  >1000                      ; Pattern table base 3
PTRNT4 EQU  >1800                      ; Pattern table base 4
NAMET1 EQU  >2000                      ; Name table base 1
NAMET2 EQU  >2400                      ; Name table base 2
COLRTB EQU  >2700                      ; Color table base
SPRATB EQU  >2780                      ; Sprite attribute table base
SPRPTB EQU  >3000                      ; Sprite pattern table base

**
* Scratch pad
WRKSP  EQU  >8300                      ; Workspace
R0LB   EQU  WRKSP+1                    ; R0 low byte required for VDP routines
R1LB   EQU  WRKSP+3
R2LB   EQU  WRKSP+5
R3LB   EQU  WRKSP+7
R4LB   EQU  WRKSP+9
R5LB   EQU  WRKSP+11
R6LB   EQU  WRKSP+13
R7LB   EQU  WRKSP+15
PLYRWS EQU  >8320
STACK  EQU  >8340                      ; Subroutine stack
RANDNO EQU  STACK+8                    ; Random number
SCRLX  EQU  RANDNO+2                   ; Vertical scroll offset
COLLP  EQU  SCRLX+2                    ; Column loop
CPYLP  EQU  COLLP+>4E                  ; Copy loop
PADMAX EQU  CPYLP+>22

NFLRS  EQU  8

********************************************************************************
*
* Main program
*
       XORG FXMEM

       DATA TOPINI
       DATA TOPFRM

*********************************************************************************
*
* Intitialize
*
TOPINI LI   R10,STACK
       MOV  R11,*R10+                  ; Push return address onto the stack
       BL   @GMODE
       BL   @INIT
       BL   @BACKG
       BL   @INISPR
*      Clear buffer
       LI   R1,BUFFER
       LI   R2,64*24
CLRBUF CLR  *R1+
       DECT R2
       JNE  CLRBUF
*      Copy to scratchpad
       LI   R0,COLLP
       LI   R1,UPDNT8
       LI   R2,UPDNT6-UPDNT8
CPPAD1 MOV  *R1+,*R0+
       DECT R2
       JNE  CPPAD1
       LI   R0,CPYLP
       LI   R1,UPDNT4
       LI   R2,UPDNT7-UPDNT4
CPPAD2 MOV  *R1+,*R0+
       DECT R2
       JNE  CPPAD2
*      Init variables
       CLR  @SCRLX
*      Screen on
       LI   R0,>01E2
       BL   @VWTR
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// TOPINI

*********************************************************************************
*
* Frame
*
TOPFRM LI   R10,STACK
       MOV  R11,*R10+                  ; Push return address onto the stack
*      Set name table
       MOV  @SCRLX,R0
       DECT  R0
       DECT  R0
       ANDI R0,4
       SRL  R0,2
       ORI  R0,>0208
       BL   @VWTR
*      Set pattern table
       MOV  @SCRLX,R0
       DECT R0
       DECT R0
       ANDI R0,>0004
       SRL  R0,2
       ORI  R0,>0400
       BL   @VWTR
*      Update name table
       BL   @UPDNT
*      Update sprites
       BL   @UPDSPR
*      Odd music frame
       BL   @PLAYSNG
*      Update variables
       INCT @SCRLX
       INCT @SCRLX
*      Check for finish
       CLR  R0
       MOV  @SCRLX,R1
       CI   R1,3000
       JL   RETURN
       SETO R0
*      Return
RETURN DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11

***************************************************************************
*
* Update name table
*
UPDNT  MOV  R11,*R10+                  ; Push return address onto the stack
*      Constants
       LI   R12,64                     ; Offset to next buffer address
       LI   R13,640                    ; Offset to next row in map
       LI   R14,>8000                  ; Further character bias for every 2nd row
*      Calculate text address and offset
       CLR  R3                         ; High word of dividend
       MOV  @SCRLX,R4                  ; Get scroll index - low word of dividend
       DIV  @DEC80,R3                  ; Divide by 80. R3 now has text index, R4 has offset within big character
       AI   R3,TXT                     ; Character pointer
       SRL  R4,3                       ; Convert offset within character from pixels to bytes/columns
*      Draw 4 big characters to buffer
       CLR  R7                         ; Global screen column
       S    R4,R7                      ; Subtract offset within big character, so we might start outside the screen
       CLR  R15                        ; Buffer column
       LI   R8,4                       ; Character counter
*      Character loop
UPDNT1 CLR  R5                         ; Clear MSB
       MOVB *R3+,@R5LB                 ; Get next character index in LSB
       AI   R5,-32                     ; Character set starts at space
       MPY  @DEC10,R5                  ; Multiply by 10. R6 now holds the map offset. R5 is zero.
       AI   R6,MD0                     ; Add base map index
*      Draw 10 columns
       LI   R9,10                      ; Column counter
*      Column loop
       BL   @COLLP                     ; Call column loop in PAD
*      Next character
       DEC  R8
       JNE  UPDNT1
*      Copy section of buffer to VDP
       MOV  @SCRLX,R0
       ANDI R0,4
       SLA  R0,8
       AI   R0,4*32+NAMET1
       BL   @VWAD
       LI   R0,VDPWD
       LI   R1,3*64+10+BUFFER
       LI   R3,18
       BL   @CPYLP                    ; Call copy loop in PAD
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11

*      Column loop
UPDNT8 MOV  R11,*R10+                  ; Push return address onto the stack
UPDNT2 MOV  R7,R1                      ; Get column
       SLA  R1,3                       ; Increase frequency
       BL   @SIN                       ; Get sine of R1 in R1 (-256 to 256)
       SRA  R1,4                       ; Scale to (-16 to 16)
       MOV  R1,R5                      ; Save the vertical pixel offset
       SRA  R1,3                       ; Vertical row offset
       SLA  R1,6                       ; Convert to buffer offset (buffer is 64 bytes wide)
       NEG  R1
       A    R15,R1                     ; Add buffer column
       AI   R1,4*64+BUFFER+10          ; Add buffer base address, 4 rows down
       S    R4,R1
       ANDI R5,>0007                   ; Isolate bits for vertical character set
       SLA  R5,4                       ; Character bias (0, 16, 32, 48, ..., 112)
       SWPB R5                         ; Swap to MSB
*      Draw 7 double rows
       LI   R2,7
*      Row loop
UPDNT3 MOVB *R6,R0                     ; Get map byte
       AB   R5,R0                      ; Add bias
       MOVB R0,*R1                     ; Write to buffer
       A    R12,R1                     ; Next buffer row
       AB   R14,R0                     ; Add further bias
       MOVB R0,*R1                     ; Write to buffer
       A    R12,R1                     ; Next buffer row
       A    R13,R6                     ; Next map row
*      Next row
       DEC  R2
       JNE  UPDNT3
*      Next column
       AI   R6,-7*640+1                ; Move map address 9 rows up and 1 column right
       INC  R7                         ; Next screen column
       INC  R15                        ; Next buffer column
       DEC  R9
       JNE  UPDNT2
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
UPDNT6

UPDNT4 LI   R2,32/8
UPDNT5 MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       DEC  R2
       JNE  UPDNT5
       AI   R1,64-32
       DEC  R3
       JNE  UPDNT4
       B    *R11
UPDNT7

DEC10  DATA 10
DEC80  DATA 80
*// UPDNT

*********************************************************************
*
* Update sprites
*
UPDSPR MOV  R11,*R10+                  ; Push return address onto the stack
*      Add new flare
       BL   @RAND
       CI   R0,0
       JLT  UPDSP3
       LI   R3,FLARES
       LI   R4,SPRATB+16
       LI   R5,NFLRS
UPDSP1 MOV  *R3,R6
       JEQ  UPDSP2
       INCT R3
       AI   R4,4
       DEC  R5
       JNE  UPDSP1
*      Didn't find one
       JMP  UPDSP3
*      Found one
UPDSP2 LI   R1,192-16
       BL   @RANDL
       MOV  R0,R8
       LI   R1,256-16
       BL   @RANDL
       MOV  R0,R9
       MOV  R4,R0
       BL   @VWAD
       SWPB R8
       MOVB R8,@VDPWD
       SWPB R9
       MOVB R9,@VDPWD
       LI   R0,FLRANI
       MOV  R0,*R3
*      Animate flares
UPDSP3 LI   R3,FLARES
       LI   R4,SPRATB+16+2
       LI   R5,NFLRS
UPDSP4 MOV  *R3,R6
       JEQ  UPDSP6
       CI   R6,FLRANE-2
       JEQ  UPDSP5
       MOV  R4,R0
       BL   @VWAD
       MOVB *R6+,@VDPWD
       MOV  R6,*R3
       JMP  UPDSP6
*      Remove flare
UPDSP5 MOV  R4,R0
       DECT R0
       LI   R1,>C000
       BL   @VSBW
       CLR  *R3
UPDSP6 INCT R3
       AI   R4,4
       DEC  R5
       JNE  UPDSP4
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// UPDSPR

*********************************************************************
*
* Initialize sprites
*
INISPR MOV  R11,*R10+			* Push return address onto the stack
	   LI	R0,SPRPTB
	   LI	R1,SPRPAT
	   LI	R2,12*32
	   BL	@VDPCP
	   LI	R0,SPRATB
	   LI	R1,SPRATT
	   LI	R2,4+NFLRS*4+1
	   BL	@VDPCP
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// INISPR

*********************************************************************
*
* Calculate sine
*
* R1: Angle in units of 1/256 of a circle
*
* On return R1 contains the sine value in FP 8.8 format
*
SIN    ANDI R1,>00FF                   ; Wrap
       SLA  R1,1
       MOV  @SINTBL(R1),R1
       B    *R11
*// SIN

*********************************************************************
*
* Calculate cosine
*
* R1: Angle in units of 1/256 of a circle
*
* On return R1 contains the cosine value in FP 8.8 format
*        
COS    AI   R1,64                      ; cos(a) = sin(a + 90 degrees or 64 units)
       ANDI R1,>00FF                   ; Wrap
       SLA  R1,1
       MOV  @SINTBL(R1),R1
       B    *R11
*// COS

*********************************************************************
*
*      256 samples of sine wave in FP 8.8 format
*
SINTBL DATA >0000,>0006,>000D,>0013,>0019,>001F,>0026,>002C
       DATA >0032,>0038,>003E,>0044,>004A,>0050,>0056,>005C
       DATA >0062,>0068,>006D,>0073,>0079,>007E,>0084,>0089
       DATA >008E,>0093,>0098,>009D,>00A2,>00A7,>00AC,>00B1
       DATA >00B5,>00B9,>00BE,>00C2,>00C6,>00CA,>00CE,>00D1
       DATA >00D5,>00D8,>00DC,>00DF,>00E2,>00E5,>00E7,>00EA
       DATA >00ED,>00EF,>00F1,>00F3,>00F5,>00F7,>00F8,>00FA
       DATA >00FB,>00FC,>00FD,>00FE,>00FF,>00FF,>0100,>0100
       DATA >0100,>0100,>0100,>00FF,>00FF,>00FE,>00FD,>00FC
       DATA >00FB,>00FA,>00F8,>00F7,>00F5,>00F3,>00F1,>00EF
       DATA >00ED,>00EA,>00E7,>00E5,>00E2,>00DF,>00DC,>00D8
       DATA >00D5,>00D1,>00CE,>00CA,>00C6,>00C2,>00BE,>00B9
       DATA >00B5,>00B1,>00AC,>00A7,>00A2,>009D,>0098,>0093
       DATA >008E,>0089,>0084,>007E,>0079,>0073,>006D,>0068
       DATA >0062,>005C,>0056,>0050,>004A,>0044,>003E,>0038
       DATA >0032,>002C,>0026,>001F,>0019,>0013,>000D,>0006
       DATA >0000,>FFFA,>FFF3,>FFED,>FFE7,>FFE1,>FFDA,>FFD4
       DATA >FFCE,>FFC8,>FFC2,>FFBC,>FFB6,>FFB0,>FFAA,>FFA4
       DATA >FF9E,>FF98,>FF93,>FF8D,>FF87,>FF82,>FF7C,>FF77
       DATA >FF72,>FF6D,>FF68,>FF63,>FF5E,>FF59,>FF54,>FF4F
       DATA >FF4B,>FF47,>FF42,>FF3E,>FF3A,>FF36,>FF32,>FF2F
       DATA >FF2B,>FF28,>FF24,>FF21,>FF1E,>FF1B,>FF19,>FF16
       DATA >FF13,>FF11,>FF0F,>FF0D,>FF0B,>FF09,>FF08,>FF06
       DATA >FF05,>FF04,>FF03,>FF02,>FF01,>FF01,>FF00,>FF00
       DATA >FF00,>FF00,>FF00,>FF01,>FF01,>FF02,>FF03,>FF04
       DATA >FF05,>FF06,>FF08,>FF09,>FF0B,>FF0D,>FF0F,>FF11
       DATA >FF13,>FF16,>FF19,>FF1B,>FF1E,>FF21,>FF24,>FF28
       DATA >FF2B,>FF2F,>FF32,>FF36,>FF3A,>FF3E,>FF42,>FF47
       DATA >FF4B,>FF4F,>FF54,>FF59,>FF5E,>FF63,>FF68,>FF6D
       DATA >FF72,>FF77,>FF7C,>FF82,>FF87,>FF8D,>FF93,>FF98
       DATA >FF9E,>FFA4,>FFAA,>FFB0,>FFB6,>FFBC,>FFC2,>FFC8
       DATA >FFCE,>FFD4,>FFDA,>FFE1,>FFE7,>FFED,>FFF3,>FFFA

*********************************************************************************
*
* Set graphics mode
*
GMODE  MOV  R11,*R10+                  ; Push return address onto the stack
       CLR  R0
       LI   R1,VREGS
       LI   R2,8
GMODE1 MOVB *R1+,@R0LB
       BL   @VWTR                      ; Set register
       AI   R0,>0100
       DEC  R2
       JNE  GMODE1
*      Clear name tables
       LI   R0,NAMET1
       CLR  R1
       LI   R2,>800
       BL   @VDPWR
*      Disable sprites
       LI   R0,SPRATB
       LI   R1,>D000
       BL   @VSBW
*      Color table
       LI   R0,COLRTB
       LI   R1,>F100
       LI   R2,32
       BL   @VDPWR
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
VREGS  BYTE >00                        ; Graphics I mode
       BYTE >A2                        ; 16K, display off, interrupt enabled
       BYTE >08                        ; NAMETB = >0400
       BYTE >9C                        ; COLRTB = >2700
       BYTE >00                        ; PTRNTB = >0000
       BYTE >4F                        ; SPRATB = >2780
       BYTE >06                        ; SPRPTB = >3000
       BYTE >00                        ; Backdrop color
*// GMODE

*********************************************************************************
*
* Initialize
*
INIT   MOV  R11,*R10+                  ; Push return address onto the stack
*      Scroll patterns
       CLR  R8                         ; Horizontal frame
INIT1  MOV  R8,R0                      ; For VDP address
       SLA  R0,11                      ; Pattern tables are 2K apart
       BL   @VWAD                      ; Set VDP address
       MOV  R8,R9                      ; For base source address
       SLA  R9,7                       ; Source frames are 128 bytes apart
       AI   R9,HPFRM0                  ; Add base address
*      From space to char
       CLR  R7                         ; Vertical frame
INIT2  MOV  R7,R6
*      SLA  R6,1                       ; Pixel offset
       CLR  R5                         ; Character index
*      Send 8-offset zeros to VDP
INIT3  LI   R4,8                       ; 8
       S    R6,R4                      ; 8 - offset
       JEQ  INIT6
INIT4  CLR  @VDPWD                     ; Send zero
       DEC  R4
       JNE  INIT4
*      Send offset bytes of char to VDP
INIT6  MOV  R6,R4
       JEQ  INIT7
       MOV  R5,R1                      ; For source address
       SLA  R1,3                       ; Multiply char index by 8
       A    R9,R1                      ; Add base source address
INIT5  MOVB *R1+,@VDPWD
       DEC  R4
       JNE  INIT5
*      Next char
INIT7  INC  R5
       CI   R5,16
       JLT  INIT3
*      Next vertical frame
       BL   @PLAYSNG
       INC  R7
       CI   R7,8
       JLT  INIT2
*      From char to space
       CLR  R7                         ; Vertical frame
INIT13 MOV  R7,R6
*      SLA  R6,1                       ; Pixel offset
       CLR  R5                         ; Character index
*      Send 8-offset bytes of char to VDP
INIT8  LI   R4,8                       ; 8
       S    R6,R4                      ; 8 - offset
       JEQ  INIT10
       MOV  R5,R1                      ; For source address
       SLA  R1,3                       ; Multiply char index by 8
       A    R6,R1                      ; Add offset
       A    R9,R1                      ; Add base source address
INIT9  MOVB *R1+,@VDPWD
       DEC  R4
       JNE  INIT9
*      Send offset zeros to VDP
INIT10 MOV  R6,R4
       JEQ  INIT12
INIT11 CLR  @VDPWD                     ; Send zero
       DEC  R4
       JNE  INIT11
*      Next char
INIT12 INC  R5
       CI   R5,16
       JLT  INIT8
*      Next vertical frame
       BL   @PLAYSNG
       INC  R7
       CI   R7,8
       JLT  INIT13
*      Next horizontal frame
       INC  R8
       CI   R8,4
       JLT  INIT1
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// INIT

*********************************************************************************
*
* Background
*
BACKG  MOV  R11,*R10+                  ; Push return address onto the stack
*      Read patterns
       CLR  R0
       LI   R1,BUFFER
       LI   R2,>2000
       BL   @VMBR
*      Patch patterns
       LI   R1,BUFFER
       LI   R5,PAT8
       LI   R4,2
BACKG1 LI   R3,256
BACKG2 LI   R2,8
BACKG3 SOCB *R5+,*R1+
       DEC  R2
       JNE  BACKG3
       AI   R5,-8
       BL   @PLAYSNG
       DEC  R3
       JNE  BACKG2
       AI   R5,8
       DEC  R4
       JNE  BACKG1
*      Write patterns
       CLR  R0
       LI   R1,BUFFER
       LI   R2,>2000
       BL   @VDPCP
*      Return
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// BACKG

*********************************************************************
*
* Generate a pseudo random number within the given limit
*
* R1: Maximum number (0 - 255) exclusive
*
* On return R0 contains the number [0; R1[
*
* R1 is unchanged. R14 and R15 are modified
*
RANDL  MOV  R11,*R10+            * Push return address onto the stack
       BL    @RAND                * Generate a random number in R0
       ANDI    R0,>00FF            * Clear MSB: [0-255]
       MOV    R0,R14                * Copy to R14
       MPY    R1,R14                * width * [0-255]
       SRL    R15,8                * (width * [0-255]) / 256
       MOV    R15,R0                * Copy result back
*       Return
       DECT R10                    * Pop return address off the stack
       MOV  *R10,R11
       B    *R11
*// RANDL

*********************************************************************
*
* Generate a pseudo random number
*
* On return R0 contains the number, which is also stored at @RANDNO
*
* R14 and R15 are modified
*
RAND   LI    R14,28643            * A prime number to multiply by
       MPY    @RANDNO,R14            * Multiply by last random number
       AI    R15,31873            * Add a prime number
       MOV    R15,@RANDNO            * Save this number for next time
       MOV    R15,R0
       B    *R11
*// RAND

********************************************************************************
*
* VDP Set Write Address
*
* R0: Address to set VDP address counter to
*
VWAD   MOVB @R0LB,@VDPWA               ; Send low byte of VDP RAM write address
       ORI  R0,>4000                   ; Set the two MSbits to 01 for write
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       ANDI R0,>3FFF                   ; Restore R0 top two MSbits
       B    *R11
*// VWAD

********************************************************************************
*
* VDP Single Byte Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
VSBW   MOVB @R0LB,@VDPWA               ; Send low byte of VDP RAM write address
       ORI  R0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       MOVB R1,@VDPWD                  ; Write byte to VDP RAM
       B    *R11
*// VSBW

********************************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
VWTR   MOVB @R0LB,@VDPWA               ; Send low byte (value) to write to VDP register
       ORI  R0,>8000                   ; Set up a VDP register write operation (10)
       MOVB R0,@VDPWA                  ; Send high byte (address) of VDP register
       B    *R11
*// VWTR

*********************************************************************
*
* VDP Multiple Byte Read
*
* R0   Starting read address in VDP RAM
* R1   Starting write address in CPU RAM
* R2   Number of bytes to read from VDP RAM
*
VMBR   MOV  R11,*R10+                  ; Push return address onto the stack
       MOVB @R0LB,@VDPWA               ; Send low byte of VDP RAM write address
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
VMBRLP MOVB @VDPRD,*R1+                ; Read byte from VDP RAM
       COC  @VMBR7F,R2
       JNE  VMBR1
       BL   @PLAYSNG
VMBR1  DEC  R2                         ; Byte counter
       JNE  VMBRLP                     ; Check if finished
       DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
VMBR7F  DATA >007F
*// VMBR

*********************************************************************
*
* Fast CPU to VDP copy, replaces VMBW
*
* R0: Destination address
* R1: Source address
* R2: Number of bytes to copy
*
VDPCP  MOV  R11,*R10+                  ; Push return address onto the stack
       SWPB R0
       MOVB R0,@VDPWA                  ; Send low byte of VDP RAM write address
       SWPB R0
       ORI  R0,>4000                   ; Set the two MSbits to 01 for write
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       LI   R0,VDPWD
       MOV  R2,R3
       SRL  R3,3                       ; Number of groups of 8
       JEQ  VDPC2
VDPC1  MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       MOVB *R1+,*R0
       COC  @VDPC7,R3
       JNE  VDPC4
       BL   @PLAYSNG
VDPC4  DEC  R3
       JNE  VDPC1
       ANDI R2,>0007                   ; Isolate number of remaining bytes
       JEQ  VDPC3
VDPC2  MOVB *R1+,*R0
       DEC  R2
       JNE  VDPC2
*      Return
VDPC3  DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
VDPC7  DATA >0007
*// VDPCP

*********************************************************************
*
* Fast CPU to VDP write, replaces VSMW
*
* R0: Destination address
* R1: Byte to write in MSB
* R2: Number of bytes to copy
*
VDPWR  MOV  R11,*R10+                  ; Push return address onto the stack
       SWPB R0
       MOVB R0,@VDPWA                  ; Send low byte of VDP RAM write address
       SWPB R0
       ORI  R0,>4000                   ; Set the two MSbits to 01 for write
       MOVB R0,@VDPWA                  ; Send high byte of VDP RAM write address
       LI   R0,VDPWD
       MOV  R2,R3
       SRL  R3,3                       ; Number of groups of 8
       JEQ  VDPW2
VDPW1  MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       MOVB R1,*R0
       COC  @VDPW7,R3
       JNE  VDPW4
       BL   @PLAYSNG
VDPW4  DEC  R3
       JNE  VDPW1
       ANDI R2,>0007                   ; Isolate number of remaining bytes
       JEQ  VDPW3
VDPW2  MOVB R1,*R0
       DEC  R2
       JNE  VDPW2
*      Return
VDPW3  DECT R10                        ; Pop return address off the stack
       MOV  *R10,R11
       B    *R11
VDPW7  DATA >0007
*// VDPWR

********************************************************************************
*
* Include files
*
       COPY "font4.a99"

********************************************************************************
*
* Variables and Data
*
TXT    TEXT '    WELCOME TO THE TI-99/4A MEGADEMO ...    '
       TEXT '!"#$%&''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_    '
       TEXT 'CRASHING NOW...    '
       BYTE 0
       EVEN

*      Fixed background tile
PAT8   DATA >0000,>3E20,>2020,>2000
PAT9   DATA >0000,>3E20,>2020,>2000

*********************************************************************
*
* Sprite attributes
*
SPRATT BYTE >FF,>00,>00,>01
	   BYTE >FF,>F0,>04,>01
	   BYTE >AF,>00,>08,>01
	   BYTE >AF,>F0,>0C,>01
	   BYTE >C0,>00,>10,>02
	   BYTE >C0,>00,>10,>03
	   BYTE >C0,>00,>10,>0A
	   BYTE >C0,>00,>10,>0C
	   BYTE >C0,>00,>10,>02
	   BYTE >C0,>00,>10,>03
	   BYTE >C0,>00,>10,>0A
	   BYTE >C0,>00,>10,>0C
	   BYTE >D0,>00

FLRANI BYTE >10,>14,>18,>1C,>20,>24,>28,>2C
	   BYTE	>2C,>28,>24,>20,>1C,>18,>14,>10
FLRANE

*
* Sprite patterns
*
SPRPAT
CORNR1 DATA >FFFF,>FFFF,>FFFE,>FCF8	* Color 1
	   DATA >F0E0,>E0C0,>C080,>8080
	   DATA >FFF8,>E080,>0000,>0000
	   DATA >0000,>0000,>0000,>0000
CORNR2 DATA >FF1F,>0701,>0000,>0000	* Color 1
	   DATA >0000,>0000,>0000,>0000
	   DATA >FFFF,>FFFF,>FF7F,>3F1F
	   DATA >0F07,>0703,>0301,>0101
CORNR3 DATA >8080,>80C0,>C0E0,>E0F0	* Color 1
	   DATA >F8FC,>FEFF,>FFFF,>FFFF
	   DATA >0000,>0000,>0000,>0000
	   DATA >0000,>0000,>80E0,>F8FF
CORNR4 DATA >0000,>0000,>0000,>0000	* Color 1
	   DATA >0000,>0000,>0107,>1FFF
	   DATA >0101,>0103,>0307,>070F
	   DATA >1F3F,>7FFF,>FFFF,>FFFF
FLARES DATA >0000,>0000,>0000,>0000
	   DATA >0000,>0000,>0000,>0000
	   DATA >0000,>0000,>0000,>0000
	   DATA >0000,>0000,>0000,>0000
FLARE1 DATA >0000,>0000,>0000,>0001    * Color 15
       DATA >0000,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>0000
FLARE2 DATA >0000,>0000,>0000,>0103    * Color 15
       DATA >0100,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>0080
       DATA >0000,>0000,>0000,>0000
FLARE3 DATA >0000,>0000,>0001,>0107    * Color 15
       DATA >0101,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>00C0
       DATA >0000,>0000,>0000,>0000
FLARE4 DATA >0000,>0000,>0101,>010F    * Color 15
       DATA >0101,>0100,>0000,>0000
       DATA >0000,>0000,>0000,>00E0
       DATA >0000,>0000,>0000,>0000
FLARE5 DATA >0000,>0001,>0101,>031F    * Color 15
       DATA >0301,>0101,>0000,>0000
       DATA >0000,>0000,>0000,>80F0
       DATA >8000,>0000,>0000,>0000
FLARE6 DATA >0000,>0101,>0105,>033F    * Color 15
       DATA >0305,>0101,>0100,>0000
       DATA >0000,>0000,>0040,>80F8
       DATA >8040,>0000,>0000,>0000
FLARE7 DATA >0001,>0101,>0905,>037F    * Color 15
       DATA >0305,>0901,>0101,>0000
       DATA >0000,>0000,>2040,>80FC
       DATA >8040,>2000,>0000,>0000
FLARE8 DATA >0101,>0111,>0905,>03FF    * Color 15
       DATA >0305,>0911,>0101,>0100
       DATA >0000,>0010,>2040,>80FE
       DATA >8040,>2010,>0000,>0000

BUFFER BSS  64*24

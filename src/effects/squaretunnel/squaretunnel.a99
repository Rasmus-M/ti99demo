*********************************************************************
* Filename: squaretunnel.a99
* Bank:     8
* Date:     05/17/2016
* Author:   orbitaldecay
* 
* A square tunnel effect.
*********************************************************************

       COPY "../../common/HEADER.INC"
       COPY "../../common/ROUTINES.INC"

FXWP   EQU  FREEWP

LBR0   EQU  FXWP+1
LBR1   EQU  FXWP+3
LBR2   EQU  FXWP+5
LBR3   EQU  FXWP+7
LBR4   EQU  FXWP+9
LBR5   EQU  FXWP+11
LBR6   EQU  FXWP+13
LBR7   EQU  FXWP+15
LBR8   EQU  FXWP+17
LBR9   EQU  FXWP+19
LBR10  EQU  FXWP+21
LBR11  EQU  FXWP+23
LBR12  EQU  FXWP+25
LBR13  EQU  FXWP+27
LBR14  EQU  FXWP+29
LBR15  EQU  FXWP+31

       XORG FXMEM

       DATA INIT
       DATA FRAME
       
INIT
        MOV  R11, @SAVR11
        LWPI FXWP

* Initialize standard mode (Graphics I)
        LI   R0,>0000
        BL   @VWTR
        LI   R0,>01A1 ; Screen disabled. Later we write 01E1 to enable.
        BL   @VWTR
        LI   R0,>0204 ; Name table starts at >1000
        BL   @VWTR
        LI   R0,>03C4 ; Color table starts at >3100
        BL   @VWTR
        LI   R0,>0400 ; Pattern table starts at >0000
        BL   @VWTR
        LI   R0,>0560 ; Sprite attribute table >3000
        BL   @VWTR
        LI   R0,>0607 ; Sprite pattern table at >3800
        BL   @VWTR
        LI   R0,>0701 ; Backdrop color is black
        BL   @VWTR
        
* At this point VRAM is organized in the following fashion:
*
* Name              Start   End
* Pattern Table     >0000   >07FF
* Name Table        >1000   >12FF (We'll be cycling through these)
*                   >1400   >16FF
*                   >1800   >1AFF
*                   >1C00   >1EFF
*                   >2000   >22FF
*                   >2400   >26FF
*                   >2800   >2AFF
*                   >2C00   >2EFF
* Sprite Attributes >3000   >30FF?
* Color Table       >3100   >3120
* Sprite Patterns   >3800   >3FFF (room for 256 8x8 sprites)

* Copy over pattern table
        CLR  R0
        LI   R1, PATTERNS
        LI   R2, PEND - PATTERNS
        BL   @VMBW

* Write color table
        LI   R0, >7100
        LI   R1, >3000
        LI   R2, 32
        MOVB @LBR0,@VDPWA
        MOVB R0, @VDPWA
        LI   R0, VDPWD
CTLP    MOVB R1, *R0
        DEC  R2
        JNE  CTLP
        
* Generate all 8 name tables
        LI   R0, 8
        CLR  R1
NTLP1   MOV  R1, R2
        SLA  R2, 1
        MOV  @NTABLES(R2), R2

* Pointer to nametable in VDP RAM is in R2
        MOVB @LBR2, @VDPWA
        MOVB R2, @VDPWA
        LI   R3, VDPWD

* Clear nametable
        CLR  R4
        LI   R5, 768
CLLP    MOV  R4, *R3
        DEC  R5
        JNE  CLLP
        
* Draw diagonal lines
        LI   R7, 4
        LI   R8, DIAG
DLP     MOV  *R8+, R9
        MOV  *R8+, R10
        MOV  *R8+, R11
        INCT R8
        A    R2, R10
        LI   R12, 10
DLP2    MOVB @LBR10, @VDPWA
        MOVB R10, @VDPWA
        MOVB @LBR9, *R3
        A    R11, R10
        DEC  R12
        JNE  DLP2
        DEC  R7
        JNE  DLP

* Draw central square
        LI   R7, ULCORN+7
        LI   R6, 127+(32*95)
        A    R2, R6
        MOVB @LBR6, @VDPWA
        MOVB R6, @VDPWA
        MOVB @LBR7, *R3

        LI   R7, URCORN+7
        LI   R6, 127+(32*96)
        A    R2, R6
        MOVB @LBR6, @VDPWA
        MOVB R6, @VDPWA
        MOVB @LBR7, *R3

        LI   R7, LLCORN+7
        LI   R6, 128+(32*95)
        A    R2, R6
        MOVB @LBR6, @VDPWA
        MOVB R6, @VDPWA
        MOVB @LBR7, *R3

        LI   R7, LRCORN+7
        LI   R6, 128+(32*96)
        A    R2, R6
        MOVB @LBR6, @VDPWA
        MOVB R6, @VDPWA
        MOVB @LBR7, *R3
        
* Loop over all five squares
        LI   R4, 5
        CLR  R5
SQLP    MOV  R5, R6

* Calculate square size
        SLA  R6, 3
        A    R1, R6
        SLA  R6, 1
        MOV  @SQUARES(R6), R6
        JNE  NOSKIP
        B    @SKIP
NOSKIP

* R7 = StartX, R8 = EndX, R9 = StartY, R10 = EndY
        LI   R7, 127
        LI   R8, 128
        S    R6, R7
        A    R6, R8
        LI   R9, 95
        LI   R10, 96
        S    R6, R9
        A    R6, R10
        
* Draw top line on square
        MOV  R9, R11        ; R11 = StartY
        ANDI R11, 7         ; R11 = StartY % 8
        AI   R11, HLINES    ; R11 = HLINES + StartY % 8
        SWPB R11
        MOV  R9, R12        ; R12 = StartY
        SRL  R12, 3         ; R12 = StartYPattern
        SLA  R12, 5         ; R12 = StartYPattern * 32
        MOV  R7, R13        ; R13 = StartX
        SRL  R13, 3         ; R13 = StartXPattern
        A    R13, R12       ; R12 = StartYPattern * 32 + StartXPattern
        A    R2, R12        ; R12 = Nametable Addr + StartYP * 32 + StartXP

        MOV  R6, R13        ; R13 = SqSize
        SRL  R13, 3
        SLA  R13, 1         ; R13 = Width in patterns (2 * SqSize / 8)
        
        CLR  R11

        MOV  R6, R14
        ANDI R14, 7
        AI   R14, ULCORN
        SWPB R14
        
        MOV  R6, R15
        ANDI R15, 7
        AI   R15, URCORN
        SWPB R15
        
        MOVB @LBR12, @VDPWA
        MOVB R12, @VDPWA
        MOVB R14, *R3
TLP     MOVB R11, *R3
        DEC  R13
        JNE  TLP
        MOVB R15, *R3

* Draw bottom line of square
        MOV  R10, R11       ; R11 = StartY
        ANDI R11, 7         ; R11 = StartY % 8
        AI   R11, HLINES    ; R11 = HLINES + StartY % 8
        SWPB R11
        MOV  R10, R12       ; R12 = StartY
        SRL  R12, 3         ; R12 = StartYPattern
        SLA  R12, 5         ; R12 = StartYPattern * 32
        MOV  R7, R13        ; R13 = StartX
        SRL  R13, 3         ; R13 = StartXPattern
        A    R13, R12       ; R12 = StartYPattern * 32 + StartXPattern
        A    R2, R12        ; R12 = Nametable Addr + StartYP * 32 + StartXP
        MOV  R6, R13        ; R13 = SqSize
        SRL  R13, 3
        SLA  R13, 1         ; R13 = Width in patterns (2 * SqSize / 8)
        
        MOV  R6, R14
        ANDI R14, 7
        AI   R14, LLCORN
        SWPB R14
        
        MOV  R6, R15
        ANDI R15, 7
        AI   R15, LRCORN
        SWPB R15

        MOVB @LBR12, @VDPWA
        MOVB R12, @VDPWA
        MOVB R14, *R3
BLP     MOVB R11, *R3
        DEC  R13
        JNE  BLP
        MOVB R15, *R3

        LWPI CTRLWP
        BL  @PLAYSNG                   ; Added by Asmusr
        LWPI FXWP

* Draw left side of square
        MOV  R7, R11        ; R11 = StartX
        ANDI R11, 7         ; R11 = StartX % 8
        AI   R11, VLINES    ; R11 = VLINES + StartX % 8
        SWPB R11
        MOV  R9, R12        ; R12 = StartY
        SRL  R12, 3         ; R12 = StartYPattern
        INC  R12
        SLA  R12, 5         ; R12 = StartYPattern * 32
        MOV  R7, R13        ; R13 = StartX
        SRL  R13, 3         ; R13 = StartXPattern
        A    R13, R12       ; R12 = StartYPattern * 32 + StartXPattern
        A    R2, R12        ; R12 = Nametable Addr + StartYP * 32 + StartXP
        MOV  R6, R13        ; R13 = SqSize
        SRL  R13, 3
        SLA  R13, 1         ; R13 = Height in patterns (2 * SqSize / 8)

LLP     MOVB @LBR12, @VDPWA
        MOVB R12, @VDPWA
        MOVB R11, *R3
        AI   R12, 32
        DEC  R13
        JNE  LLP

* Draw right side of square
        MOV  R8, R11        ; R11 = StartX
        ANDI R11, 7         ; R11 = StartX % 8
        AI   R11, VLINES    ; R11 = VLINES + StartX % 8
        SWPB R11
        MOV  R9, R12        ; R12 = StartY
        SRL  R12, 3         ; R12 = StartYPattern
        INC  R12
        SLA  R12, 5         ; R12 = StartYPattern * 32
        MOV  R8, R13        ; R13 = EndX
        SRL  R13, 3         ; R13 = EndXPattern
        A    R13, R12       ; R12 = StartYPattern * 32 + EndXPattern
        A    R2, R12        ; R12 = Nametable Addr + StartYP * 32 + EndXP
        MOV  R6, R13        ; R13 = SqSize
        SRL  R13, 3
        SLA  R13, 1         ; R13 = Height in patterns (2 * SqSize / 8)

RLP     MOVB @LBR12, @VDPWA
        MOVB R12, @VDPWA
        MOVB R11, *R3
        AI   R12, 32
        DEC  R13
        JNE  RLP

SKIP        
        INC  R5
        DEC  R4
        JEQ  NOSQ
        B    @SQLP
NOSQ
        INC  R1
        DEC  R0
        JEQ  NONT

        LWPI CTRLWP
        BL  @PLAYSNG                   ; Added by Asmusr
        LWPI FXWP

        B    @NTLP1
NONT
        
* Enable screen
        LI   R0, >01E1
        BL   @VWTR
        
        LWPI CTRLWP
        MOV  @SAVR11, R11
        RT
    
FRAME
        C    R3, @OLDTIME
        JEQ  NOPE
        LWPI FXWP
        MOV  @>8306, R0
        MOV  R0, @OLDTIME
        SRA  R0, 1
        ANDI R0, 7
        AI   R0, >0204
        BL   @VWTR
        LWPI CTRLWP

NOPE
* Bail after 600 ticks (10 seconds)
        CI   R3, 600
        JGT  BAIL
        CLR  R0
        JMP  RETURN
BAIL
        SETO R0
RETURN
        RT

SAVR11  DATA >0000
OLDTIME DATA >0000        
  
*********************************************************************
* VDP RAM Write Register
* Writes the value in the least-significant byte of Register 0 to the
* VDP Register indicated in the most-significant byte of Register 0.
* This is identical in behavior to the VWTR procedure in the E/A
* cart.
* Trashes: R0
*********************************************************************
        EVEN
VWTR    ORI  R0,>8000
        SWPB R0
        MOVB R0,@VDPWA
        SWPB R0
        MOVB R0,@VDPWA
        NOP
        RT

*********************************************************************
* VDP RAM Multibyte Write
* Writes the array at Register 1 to the VDP RAM location in Register
* 0. Writes Register 2 bytes.
* Trashes: R0, R1, R2
*********************************************************************
        EVEN
VMBW    SWPB R0
        MOVB R0,@VDPWA
        SWPB R0
        ORI  R0,>4000
        MOVB R0,@VDPWA
MBWLP   MOVB *R1+,@VDPWD
        DEC  R2
        JNE  MBWLP
        RT

PATTERNS

* Empty pattern

        BYTE >00, >00, >00, >00, >00, >00, >00, >00

* Horizontal lines
HLINES  EQU     1
        BYTE >FF, >00, >00, >00, >00, >00, >00, >00
        BYTE >00, >FF, >00, >00, >00, >00, >00, >00
        BYTE >00, >00, >FF, >00, >00, >00, >00, >00
        BYTE >00, >00, >00, >FF, >00, >00, >00, >00
        BYTE >00, >00, >00, >00, >FF, >00, >00, >00
        BYTE >00, >00, >00, >00, >00, >FF, >00, >00
        BYTE >00, >00, >00, >00, >00, >00, >FF, >00
        BYTE >00, >00, >00, >00, >00, >00, >00, >FF

* Vertical lines
VLINES  EQU     9
        BYTE >80, >80, >80, >80, >80, >80, >80, >80        
        BYTE >40, >40, >40, >40, >40, >40, >40, >40
        BYTE >20, >20, >20, >20, >20, >20, >20, >20
        BYTE >10, >10, >10, >10, >10, >10, >10, >10
        BYTE >08, >08, >08, >08, >08, >08, >08, >08
        BYTE >04, >04, >04, >04, >04, >04, >04, >04
        BYTE >02, >02, >02, >02, >02, >02, >02, >02
        BYTE >01, >01, >01, >01, >01, >01, >01, >01

* Upper left corner
ULCORN  EQU     17
        BYTE >80, >40, >20, >10, >08, >04, >02, >01
        BYTE >80, >40, >20, >10, >08, >04, >02, >03
        BYTE >80, >40, >20, >10, >08, >04, >06, >05
        BYTE >80, >40, >20, >10, >08, >0C, >0A, >09
        BYTE >80, >40, >20, >10, >18, >14, >12, >11
        BYTE >80, >40, >20, >30, >28, >24, >22, >21
        BYTE >80, >40, >60, >50, >48, >44, >42, >41
        BYTE >80, >C0, >A0, >90, >88, >84, >82, >81
    
* Upper right corner
URCORN  EQU     25
        BYTE >01, >02, >04, >08, >10, >20, >40, >80
        BYTE >01, >02, >04, >08, >10, >20, >40, >A0
        BYTE >01, >02, >04, >08, >10, >20, >60, >A0    
        BYTE >01, >02, >04, >08, >10, >30, >50, >90
        BYTE >01, >02, >04, >08, >18, >28, >48, >88
        BYTE >01, >02, >04, >0C, >14, >24, >44, >84
        BYTE >01, >02, >06, >0A, >12, >22, >42, >82
        BYTE >01, >03, >05, >09, >11, >21, >41, >81
    
* Lower left corner
LLCORN  EQU     33
        BYTE >01, >02, >04, >08, >10, >20, >40, >80
        BYTE >03, >03, >04, >08, >10, >20, >40, >80
        BYTE >05, >06, >07, >08, >10, >20, >40, >80
        BYTE >09, >0A, >0C, >0F, >10, >20, >40, >80
        BYTE >11, >12, >14, >18, >1F, >20, >40, >80
        BYTE >21, >22, >24, >28, >30, >3F, >40, >80
        BYTE >41, >42, >44, >48, >50, >60, >7F, >80
        BYTE >81, >82, >84, >88, >90, >A0, >C0, >FF
    
* Lower right corner
LRCORN  EQU     41
        BYTE >80, >40, >20, >10, >08, >04, >02, >01
        BYTE >C0, >C0, >20, >10, >08, >04, >02, >01
        BYTE >A0, >60, >E0, >10, >08, >04, >02, >01
        BYTE >90, >50, >30, >F0, >08, >04, >02, >01
        BYTE >88, >48, >28, >18, >F8, >04, >02, >01
        BYTE >84, >44, >24, >14, >0C, >FC, >02, >01
        BYTE >82, >42, >22, >12, >0A, >06, >FE, >01
        BYTE >81, >41, >21, >11, >09, >05, >03, >FF
PEND
        
SQUARES
        DATA 8, 8, 8, 8, 8, 8, 8, 8
        DATA 16, 16, 17, 18, 19, 20, 21, 23
        DATA 25, 27, 30, 33, 36, 39, 42, 46
        DATA 50, 54, 59, 64, 69, 74, 79, 85
        DATA 91, 97, 104, 111, 118, 125, 0, 0

NTABLES
        DATA >5000, >5400, >5800, >5C00, >6000, >6400, >6800, >6C00
DIAG
        DATA LLCORN, 306, -31, 0   ; 18, 9 OK
        DATA LLCORN, 740, -31, 0   ; 4, 23 OK
        DATA LRCORN, 466, 33, 0    ; 18, 13
        DATA LRCORN, 4, 33, 0      ; 4, 0
        END

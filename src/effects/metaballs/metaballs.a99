*********************************************************************
* Filename: metaballs.a99
* Bank:     9
* Date:     05/17/2016
* Author:   orbitaldecay
* 
* A square tunnel effect.
*********************************************************************

       COPY "../../common/HEADER.INC"
       COPY "../../common/ROUTINES.INC"

NTSP   EQU  >8360
FXWP   EQU  FREEWP

LBR0   EQU  FXWP+1
LBR1   EQU  FXWP+3
LBR2   EQU  FXWP+5
LBR3   EQU  FXWP+7
LBR4   EQU  FXWP+9
LBR5   EQU  FXWP+11
LBR6   EQU  FXWP+13
LBR7   EQU  FXWP+15
LBR8   EQU  FXWP+17
LBR9   EQU  FXWP+19
LBR10  EQU  FXWP+21
LBR11  EQU  FXWP+23
LBR12  EQU  FXWP+25
LBR13  EQU  FXWP+27
LBR14  EQU  FXWP+29
LBR15  EQU  FXWP+31

SQTAB  EQU  >A800

        XORG FXMEM

        DATA INIT
        DATA FRAME
       
INIT    MOV  R11, @SAVR11
        LWPI FXWP

* Initialize standard mode (Graphics I)
        LI   R0,>0000
        BL   @VWTR
        LI   R0,>01A1 ; Screen disabled. Later we write 01E1 to enable.
        BL   @VWTR
        LI   R0,>0204 ; Name table starts at >1000
        BL   @VWTR
        LI   R0,>03C4 ; Color table starts at >3100
        BL   @VWTR
        LI   R0,>0400 ; Pattern table starts at >0000
        BL   @VWTR
        LI   R0,>0560 ; Sprite attribute table >3000
        BL   @VWTR
        LI   R0,>0607 ; Sprite pattern table at >3800
        BL   @VWTR
        LI   R0,>0701 ; Backdrop color is black
        BL   @VWTR
        
* At this point VRAM is organized in the following fashion:
*
* Name              Start   End
* Pattern Table     >0000   >07FF
* Name Table        >1000   >12FF (We'll be cycling through these)
* Sprite Attributes >3000   >30FF?
* Color Table       >3100   >3120
* Sprite Patterns   >3800   >3FFF (room for 256 8x8 sprites)

        CLR  R15

* Copy over pattern table
        CLR  R0
        LI   R1, PATTERNS
        LI   R2, PEND - PATTERNS
        BL   @VMBW

* Write color table
        LI   R0, >7100
        LI   R1, >BD00
        LI   R2, 32
        MOVB @LBR0,@VDPWA
        MOVB R0, @VDPWA
        LI   R0, VDPWD
CTLP    MOVB R1, *R0
        DEC  R2
        JNE  CTLP
        
        LWPI CTRLWP                    ; added by Tursi
        BL  @PLAYSNG                   ; Added by Asmusr
        LWPI FXWP                      ; added by Tursi

* Compute dx^2 table
        LI   R0, 32
        CLR  R1
DX2L1   LI   R2, 256
        CLR  R3

* Place lower 8 bits of product in the low byte of R5 and clip at 255
DX2L2   
        MOV  R1, R4
        SLA  R4, 3
        S    R3, R4

        SLA  R4, 8
        ABS  R4
        SRL  R4, 8

        MPY  R4, R4

* Compute index in SQTAB and write product
        MOV  R1, R4
        SWPB R4
        SOC  R3, R4
        SLA  R4, 1
        MOV  R5, @SQTAB(R4)

        LWPI CTRLWP                    ; added by Tursi
        BL  @PLAYSNG                   ; Added by Asmusr
        LWPI FXWP                      ; added by Tursi

        INC  R3
        DEC  R2
        JNE  DX2L2
        INC  R1

        DEC  R0
        JNE  DX2L1
        
* Copy nametable routine to scratchpad
        LI   R0, NT
        LI   R1, NTSP
        LI   R2, NTEND - NT
SPLP    MOV  *R0+, *R1+
        DECT R2
        JNE  SPLP

        LWPI CTRLWP
        MOV @SAVR11, R11
        RT
    
FRAME
        MOV  R11, @SAVR11
        LWPI FXWP
        
* Enable screen
        LI   R0, >01E1
        BL   @VWTR

* Write nametable
        LI   R0, >5000 ; >1000 | >4000
        MOVB @LBR0, @VDPWA
        MOVB R0, @VDPWA
        MOV  @POS+0, R12
        MOV  @POS+2, R13
        MOV  @POS+4, R14
        MOV  @POS+6, R15

        BL   @NTSP

* Increment positions
        DECT  R12
        INC   R13
        INC   R14
        INCT  R15

* Save positions
        ANDI R12, >00FF
        MOV  R12, @POS
        ANDI R13, >00FF
        MOV  R13, @POS+2
        ANDI R14, >00FF
        MOV  R14, @POS+4
        ANDI R15, >00FF
        MOV  R15, @POS+6
        
* Bail after 1200 ticks (20 seconds)
        LWPI CTRLWP
        CI   R3, 1200
        JGT  BAIL
        CLR  R0
        JMP  RETURN
BAIL
        SETO R0
RETURN
        MOV @SAVR11, R11
        RT
  
SAVR11  DATA >0000
POS     DATA 3, 3, 30, 27

*********************************************************************
* VDP RAM Write Register
* Writes the value in the least-significant byte of Register 0 to the
* VDP Register indicated in the most-significant byte of Register 0.
* This is identical in behavior to the VWTR procedure in the E/A
* cart.
* Trashes: R0
*********************************************************************
        EVEN
VWTR    ORI  R0,>8000
        SWPB R0
        MOVB R0,@VDPWA
        SWPB R0
        MOVB R0,@VDPWA
        NOP
        RT

*********************************************************************
* VDP RAM Multibyte Write
* Writes the array at Register 1 to the VDP RAM location in Register
* 0. Writes Register 2 bytes.
* Trashes: R0, R1, R2
*********************************************************************
        EVEN
VMBW    SWPB R0
        MOVB R0,@VDPWA
        SWPB R0
        ORI  R0,>4000
        MOVB R0,@VDPWA
MBWLP   MOVB *R1+,@VDPWD
        DEC  R2
        JNE  MBWLP
        RT

********************************************************************************
* Move me to scratchpad
********************************************************************************
NT
        LI   R0, 24
        MOV  R13, R5
        MOV  R15, R7
        SLA  R5, 1
        SLA  R7, 1
        LI   R3, VDPWD
FLPY    LI   R2, 32
        MOV  R12, R4
        MOV  R14, R6
        SLA  R4, 1
        SLA  R6, 1
FLPX    
* Metaball 1
        MOV  @SQTAB(R4), R8     ; Take dx (R4) and lookup dx^2 (R8)
        MOV  @SQTAB(R5), R9     ; Take dy (R5) and lookup dy^2 (R9)
        A    R8, R9             ; R9 = r^2 = dx^2 + dy^2
        SRL  R9, 6              ; R9 = r^2 / 64 i.e. in [0, 1023]
        MOVB @FALOFF(R9), R9    ; R9 = f(r^2)

* Metaball 2
        MOV  @SQTAB(R6), R10
        MOV  @SQTAB(R7), R1
        A    R10, R1
        SRL  R1, 6
        MOVB @FALOFF(R1), R1

* Sum the metaballs
        AB   R9, R1
        CI   R1, >0800
        JLT  DRAW
        LI   R1, >0700
        
* Write to VDP
DRAW    MOVB R1, *R3

        AI   R4, >0200
        AI   R6, >0200
        DEC  R2
        JNE  FLPX
        
        LWPI CTRLWP
        BL   @PLAYSNG
        LWPI FXWP
        
        AI   R5, >0200
        AI   R7, >0200        
        DEC  R0
        JNE  FLPY
        B    *R11
NTEND
********************************************************************************
        
PATTERNS

* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .

        BYTE >00, >00, >00, >00, >00, >00, >00, >00
        
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . x x . . .
* . . . x x . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .

        BYTE >00, >00, >00, >18, >18, >00, >00, >00

* . . . . . . . .
* . . . . . . . .
* . . . x x . . .
* . . x x x x . .
* . . x x x x . .
* . . . x x . . .
* . . . . . . . .
* . . . . . . . .

        BYTE >00, >00, >18, >3C, >3C, >18, >00, >00

* . . . . . . . .
* . . . x x . . .
* . . x x x x . .
* . x x x x x x .
* . x x x x x x .
* . . x x x x . .
* . . . x x . . .
* . . . . . . . .

        BYTE >00, >18, >3C, >7E, >7E, >3C, >18, >00

* . . . x x . . .
* . . x x x x . .
* . x x x x x x .
* x x x x x x x x
* x x x x x x x x
* . x x x x x x .
* . . x x x x . .
* . . . x x . . .

        BYTE >18, >3C, >7E, >FF, >FF, >7E, >3C, >18

* . . x x x x . .
* . x x x x x x .
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* . x x x x x x .
* . . x x x x . .

        BYTE >3C, >7E, >FF, >FF, >FF, >FF, >7E, >3C

* . x x x x x x .
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* . x x x x x x .

        BYTE >7E, >FF, >FF, >FF, >FF, >FF, >FF, >7E

* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x

        BYTE >FF, >FF, >FF, >FF, >FF, >FF, >FF, >FF

PEND

FALOFF
        COPY "falloff.a99"
        END

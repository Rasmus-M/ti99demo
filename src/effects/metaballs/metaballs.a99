*********************************************************************
* Filename: metaballs.a99
* Bank:     9
* Date:     05/17/2016
* Author:   orbitaldecay
* 
* A square tunnel effect.
*********************************************************************

       COPY "../../common/HEADER.INC"
       COPY "../../common/ROUTINES.INC"

NTSP   EQU  >8360
FXWP   EQU  FREEWP

LBR0   EQU  FXWP+1
LBR1   EQU  FXWP+3
LBR2   EQU  FXWP+5
LBR3   EQU  FXWP+7
LBR4   EQU  FXWP+9
LBR5   EQU  FXWP+11
LBR6   EQU  FXWP+13
LBR7   EQU  FXWP+15
LBR8   EQU  FXWP+17
LBR9   EQU  FXWP+19
LBR10  EQU  FXWP+21
LBR11  EQU  FXWP+23
LBR12  EQU  FXWP+25
LBR13  EQU  FXWP+27
LBR14  EQU  FXWP+29
LBR15  EQU  FXWP+31

SQTAB  EQU  >A800

        XORG FXMEM

        DATA INIT
        DATA FRAME
       
INIT    MOV  R11, @SAVR11
        LWPI FXWP

* Initialize standard mode (Graphics II hybrid)
        LI   R0,>0002
        BL   @VWTR
        LI   R0,>01A2 ; Screen disabled. Later we write 01E2 to enable.
        BL   @VWTR
        LI   R0,>020A ; Name table starts at >2800
        BL   @VWTR
        LI   R0,>039F ; Color table starts at >2000, >800 bytes long
        BL   @VWTR
        LI   R0,>0403 ; Pattern table starts at >0000, >1800 bytes long
        BL   @VWTR
        LI   R0,>0556 ; Sprite attribute table >2B00
        BL   @VWTR
        LI   R0,>0603 ; Sprite pattern table at >1800
        BL   @VWTR
        LI   R0,>070D ; Backdrop color is black
        BL   @VWTR
        
* At this point VRAM is organized in the following fashion:
*
* Name              Start   End
* Pattern Table     >0000   >07FF
* Name Table        >2800   >1CFF (We'll be cycling through these)
* Sprite Attributes >2B00   >2B7F
* Color Table       >2000   >27FF
* Sprite Patterns   >1800   >1FFF (room for 256 8x8 sprites)

        CLR  R15

* Sprites patterns
       LI   R0, >1800 | >4000
       MOVB @LBR0,@VDPWA
       MOVB R0, @VDPWA
       LI   R0,VDPWD
       LI   R1,SPR0
       LI   R2,11*32
SPLP1  MOVB *R1+,*R0
       DEC  R2
       JNE  SPLP1
       LWPI CTRLWP                     ; Added by Tursi
       BL   @PLAYSNG                   ; Added by Asmusr
       LWPI FXWP                       ; Added by Tursi
*      Sprite attributes
       LI   R0, >2B00 | >4000
       MOVB @LBR0,@VDPWA
       MOVB R0, @VDPWA
       LI   R0,VDPWD
       LI   R1,SAL
       LI   R2,11*4
SPLP2  MOVB *R1+,*R0
       DEC  R2
       JNE  SPLP2
       LI   R1,>D000
       MOVB R1,*R0

* Patterns
       LI   R0,>0000 | >4000
       MOVB @LBR0,@VDPWA
       MOVB R0,@VDPWA
       LI   R0,VDPWD
       LI   R5,3
PTLP0  LI   R4,16
PTLP1  LI   R2,64
       LI   R1,PATTERNS
PTLP2  MOVB *R1+,*R0
       DEC  R2
       JNE  PTLP2
       LI   R3,8
PTLP3  LI   R1,PEND-8
       LI   R2,8
PTLP4  MOVB *R1+,*R0
       DEC  R2
       JNE  PTLP4
       DEC  R3
       JNE  PTLP3
       LWPI CTRLWP                     ; Added by Tursi
       BL   @PLAYSNG                   ; Added by Asmusr
       LWPI FXWP                       ; Added by Tursi
       DEC  R4
       JNE  PTLP1
       DEC  R5
       JNE  PTLP0

* Write color table
       LI   R0,>2000 | >4000
       MOVB @LBR0,@VDPWA
       MOVB R0,@VDPWA
       LI   R0,VDPWD
       LI   R1,COL0
       LI   R4,16
CLLP1  LI   R3,16
CLLP2  LI   R2,8
CLLP3  MOVB *R1+,*R0
       DEC  R2
       JNE  CLLP3
       AI   R1,-8
       DEC  R3
       JNE  CLLP2
       LWPI CTRLWP                    ; Added by Tursi
       BL   @PLAYSNG                  ; Added by Asmusr
       LWPI FXWP                      ; Added by Tursi
       AI   R1,8
       DEC  R4
       JNE  CLLP1

* Compute dx^2 table
        LI   R0, 32
        CLR  R1
DX2L1   LI   R2, 256
        CLR  R3

* Place lower 8 bits of product in the low byte of R5 and clip at 255
DX2L2   
        MOV  R1, R4
        SLA  R4, 3
        S    R3, R4

        SLA  R4, 8
        ABS  R4
        SRL  R4, 8

        MPY  R4, R4
        SRL  R5,6

* Compute index in SQTAB and write product
        MOV  R1, R4
        SWPB R4
        SOC  R3, R4
        SLA  R4, 1
        MOV  R5, @SQTAB(R4)

        LWPI CTRLWP                    ; added by Tursi
        BL  @PLAYSNG                   ; Added by Asmusr
        LWPI FXWP                      ; added by Tursi

        INC  R3
        DEC  R2
        JNE  DX2L2
        INC  R1

        DEC  R0
        JNE  DX2L1
        
* Copy nametable routine to scratchpad
        LI   R0, NT
        LI   R1, NTSP
        LI   R2, NTEND - NT
SPLP    MOV  *R0+, *R1+
        DECT R2
        JNE  SPLP

* Init positions
        MOV  @POS+0, R12
        MOV  @POS+2, R13
        MOV  @POS+4, R14
        MOV  @POS+6, R15

        LWPI CTRLWP
        MOV @SAVR11, R11
        RT
    
FRAME
        MOV  R11, @SAVR11
        LWPI FXWP
        
* Enable screen
        LI   R0, >01E2
        BL   @VWTR

* Write nametable
        LI   R0, >2800 | >4000
        MOVB @LBR0, @VDPWA
        MOVB R0, @VDPWA

        BL   @NTSP

;        MOV  @POS+0, R12
        MOV  @POS+2, R13
;        MOV  @POS+4, R14
        MOV  @POS+6, R15

* Increment positions
        DECT  R12
        INC   R13
        INC   R14
        INCT  R15

        ANDI R12, >00FF
        ANDI R13, >00FF
        ANDI R14, >00FF
        ANDI R15, >00FF

* Save positions
;        MOV  R12, @POS
        MOV  R13, @POS+2
;        MOV  R14, @POS+4
        MOV  R15, @POS+6

* Bail after 1200 ticks (20 seconds)
        LWPI CTRLWP
        CI   R3, 1200
        JGT  BAIL
        CLR  R0
        JMP  RETURN
BAIL
        SETO R0
RETURN
        MOV @SAVR11, R11
        RT
  
SAVR11  DATA >0000
POS     DATA 3, 3, 30, 27

*********************************************************************
* VDP RAM Write Register
* Writes the value in the least-significant byte of Register 0 to the
* VDP Register indicated in the most-significant byte of Register 0.
* This is identical in behavior to the VWTR procedure in the E/A
* cart.
* Trashes: R0
*********************************************************************
        EVEN
VWTR    ORI  R0,>8000
        SWPB R0
        MOVB R0,@VDPWA
        SWPB R0
        MOVB R0,@VDPWA
        NOP
        RT

*********************************************************************
* VDP RAM Multibyte Write
* Writes the array at Register 1 to the VDP RAM location in Register
* 0. Writes Register 2 bytes.
* Trashes: R0, R1, R2
*********************************************************************
        EVEN
VMBW    SWPB R0
        MOVB R0,@VDPWA
        SWPB R0
        ORI  R0,>4000
        MOVB R0,@VDPWA
MBWLP   MOVB *R1+,@VDPWD
        DEC  R2
        JNE  MBWLP
        RT

********************************************************************************
* Move me to scratchpad
********************************************************************************
NT
        LI   R0, 24
        MOV  R13, R5
        MOV  R15, R7
        SLA  R5, 1
        SLA  R7, 1
        LI   R3, VDPWD
        CLR  R13                 ; Bias
        LI   R15,>0200
FLPY    LI   R2, 32
        MOV  R12, R4
        MOV  R14, R6
        SLA  R4, 1
        SLA  R6, 1

        MOV  @SQTAB(R5), R9     ; Take dy (R5) and lookup dy^2 (R9)
        MOV  @SQTAB(R7), R1     ; Asmusr: moved out of inner loop
FLPX
* Metaball 1
        MOV  @SQTAB(R4), R8     ; Take dx (R4) and lookup dx^2 (R8)
        A    R9, R8             ; R8 = r^2 = dx^2 + dy^2
*        SRL  R8, 6             ; R8 = r^2 / 64 i.e. in [0, 1023] (Asmusr: scaled SQTAB instead)
        MOVB @FALOFF(R8), R8    ; R8 = f(r^2)

* Metaball 2
        MOV  @SQTAB(R6), R10
        A    R1, R10
*        SRL  R10, 6
* Sum the metaballs
        AB   @FALOFF(R10), R8
;        AB   R8, R10
;        CI   R10, >0800        ; No need for check if more characters are defined
;        JLT  DRAW
;        LI   R10, >0700
        
* Write to VDP
DRAW    AB   R13,R8
        MOVB R8, *R3

        A    R15,R4
        A    R15,R6
        DEC  R2
        JNE  FLPX
        
        LWPI CTRLWP
        BL   @PLAYSNG
        LWPI FXWP
        
        A    R15,R5
        A    R15,R7
        AI   R13,>1000
        DEC  R0
        JNE  FLPY
        B    *R11
NTEND
********************************************************************************
        
PATTERNS

* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .

        BYTE >00, >00, >00, >00, >00, >00, >00, >00
        
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .
* . . . x x . . .
* . . . x x . . .
* . . . . . . . .
* . . . . . . . .
* . . . . . . . .

        BYTE >00, >00, >00, >18, >18, >00, >00, >00

* . . . . . . . .
* . . . . . . . .
* . . . x x . . .
* . . x x x x . .
* . . x x x x . .
* . . . x x . . .
* . . . . . . . .
* . . . . . . . .

        BYTE >00, >00, >18, >3C, >3C, >18, >00, >00

* . . . . . . . .
* . . . x x . . .
* . . x x x x . .
* . x x x x x x .
* . x x x x x x .
* . . x x x x . .
* . . . x x . . .
* . . . . . . . .

        BYTE >00, >18, >3C, >7E, >7E, >3C, >18, >00

* . . . x x . . .
* . . x x x x . .
* . x x x x x x .
* x x x x x x x x
* x x x x x x x x
* . x x x x x x .
* . . x x x x . .
* . . . x x . . .

        BYTE >18, >3C, >7E, >FF, >FF, >7E, >3C, >18

* . . x x x x . .
* . x x x x x x .
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* . x x x x x x .
* . . x x x x . .

        BYTE >3C, >7E, >FF, >FF, >FF, >FF, >7E, >3C

* . x x x x x x .
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* . x x x x x x .

        BYTE >7E, >FF, >FF, >FF, >FF, >FF, >FF, >7E

* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x
* x x x x x x x x

        BYTE >FF, >FF, >FF, >FF, >FF, >FF, >FF, >FF
PEND

COL0   DATA >DDDD,>5D5D,>3D5D,>DDDD
COL1   DATA >DD3D,>BDBD,>FDBD,>FDDD
COL2   DATA >FDFD,>BDFD,>BDBD,>3DBD
COL3   DATA >3D3D,>5D3D,>5D5D,>4D1D
COL4   DATA >4D1D,>4D1D,>1D4D,>1D1D
COL5   DATA >1D1D,>1D1D,>1D1D,>1D1D
COL6   DATA >1D1D,>4D1D,>1D4D,>1D4D
COL7   DATA >1D4D,>5D5D,>3D5D,>3D3D
COL8   DATA >BD3D,>BDBD,>FDBD,>FDFD
COL9   DATA >FDFD,>BDFD,>BDBD,>3DBD
COL10  DATA >3D3D,>5D3D,>5D5D,>4D1D
COL11  DATA >4D1D,>4D1D,>1D4D,>1D1D
COL12  DATA >1D1D,>1D1D,>1D1D,>1D1D
COL13  DATA >DD1D,>4D1D,>1D4D,>1DDD
COL14  DATA >DDDD,>5D5D,>3D5D,>DDDD
COL15  DATA >DDDD,>BDBD,>FDBD,>DDDD

SPR0   DATA >0000,>0000,>0000,>0000
       DATA >0101,>0103,>0303,>031F
       DATA >0000,>0000,>001F,>3FFF
       DATA >EFC3,>C3C1,>E1E0,>E0F0
SPR1   DATA >003C,>7C7C,>7878,>F8F8
       DATA >F8F8,>F8F8,>F8F8,>F8F0
       DATA >0000,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>1FFF
SPR2   DATA >0000,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>80E0
       DATA >0000,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>0000
SPR3   DATA >0000,>0000,>0000,>0000
       DATA >0000,>0000,>1838,>7979
       DATA >0001,>030F,>1F3D,>71E1
       DATA >C101,>0000,>20E0,>E0E0
SPR4   DATA >7FFF,>E1E0,>E0E1,>E1E1
       DATA >F1F3,>F3F3,>F3F7,>F7FF
       DATA >F0F8,>F8FC,>FEFF,>FFFF
       DATA >DFCF,>CF87,>9733,>63E1
SPR5   DATA >E34F,>3F7E,>EF8F,>0F0F
       DATA >8F8F,>8FCF,>CFFF,>EFEF
       DATA >FFC3,>0101,>0103,>0307
       DATA >0E1C,>78F0,>E0F8,>FCFE
SPR6   DATA >E0E0,>E0E0,>C0C0,>800E
       DATA >1F3F,>7EFC,>F979,>0303
       DATA >0000,>0000,>000C,>1F3F
       DATA >3E7E,>FCF8,>F8F0,>E0E0
SPR7   DATA >7C7C,>7C3C,>3E3E,>3C18
       DATA >0000,>0000,>0000,>0000
       DATA >E0F0,>F0F0,>C0C0,>0000
       DATA >0103,>0302,>0000,>0000
SPR8   DATA >FEFF,>FDF9,>FBF3,>E3E3
       DATA >C383,>0101,>0000,>0000
       DATA >E1C1,>C0C0,>C0C0,>C0E0
       DATA >E0F0,>FEFF,>FF7F,>3F00
SPR9   DATA >FFFF,>FFFF,>FF7F,>7E7C
       DATA >7878,>70E0,>E0C0,>0000
       DATA >FF3F,>1F0F,>0703,>0100
       DATA >0000,>0000,>0000,>0000
SPR10  DATA >0380,>C0E0,>E0E0,>C080
       DATA >0000,>0000,>0000,>0000
       DATA >C0C0,>0000,>0000,>0000
       DATA >0000,>0000,>0000,>0000

SAL    BYTE 143,208,0,1
       BYTE 159,224,20,1
       BYTE 175,240,40,1
       BYTE 159,240,24,1
       BYTE 175,224,36,1
       BYTE 143,240,8,1
       BYTE 159,192,12,1
       BYTE 175,208,32,1
       BYTE 143,224,4,1
       BYTE 159,208,16,1
       BYTE 175,192,28,1

FALOFF
        COPY "falloff.a99"
        END
